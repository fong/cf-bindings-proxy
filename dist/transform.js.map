{"version":3,"file":"transform.js","sources":["../src/transform.ts"],"sourcesContent":["import type { PropertyCall } from './proxy';\r\n\r\nexport type TransformDataType =\r\n\t| 'buffer'\r\n\t| 'blob'\r\n\t| 'stream'\r\n\t| 'base64'\r\n\t| 'text'\r\n\t| 'json'\r\n\t| 'url'\r\n\t| 'request'\r\n\t| 'response';\r\n\r\nexport type TransformRawType =\r\n\t| ArrayBuffer\r\n\t| Blob\r\n\t| string\r\n\t| NonNullable<object>\r\n\t| URL\r\n\t| Request\r\n\t| Response;\r\n\r\ntype ParseTransformFrom<T extends TransformDataType> = T extends 'buffer'\r\n\t? Extract<TransformDataType, 'base64' | 'text' | 'json'>\r\n\t: T extends 'blob' | 'stream'\r\n\t? Extract<TransformDataType, 'base64'>\r\n\t: T extends 'base64'\r\n\t? Extract<TransformDataType, 'buffer' | 'blob' | 'stream'>\r\n\t: T extends 'text'\r\n\t? Extract<TransformDataType, 'url' | 'request' | 'response'>\r\n\t: T extends 'url' | 'request' | 'response'\r\n\t? Extract<TransformDataType, 'text'>\r\n\t: never;\r\n\r\nexport type TransformRule<\r\n\tFrom extends TransformDataType = TransformDataType,\r\n\tTo extends ParseTransformFrom<From> = ParseTransformFrom<From>,\r\n> = { from: From; to: To };\r\n\r\nexport type ParseType<T extends TransformDataType> = T extends 'buffer'\r\n\t? ArrayBuffer\r\n\t: T extends 'blob'\r\n\t? Blob\r\n\t: T extends 'stream'\r\n\t? ReadableStream\r\n\t: T extends 'base64' | 'text'\r\n\t? string\r\n\t: T extends 'json'\r\n\t? NonNullable<object>\r\n\t: T extends 'url'\r\n\t? URL\r\n\t: T extends 'request'\r\n\t? Request\r\n\t: T extends 'response'\r\n\t? Response\r\n\t: never;\r\n\r\nexport type Functions = 'arrayBuffer' | 'blob' | 'json' | 'text' | 'body';\r\nexport type FunctionInfo<\r\n\tDataTransformRule extends TransformRule | undefined = TransformRule | undefined,\r\n\tData = DataTransformRule extends TransformRule ? ParseType<DataTransformRule['to']> : undefined,\r\n> = ({ data: Data; takeDataFrom?: never } | { data?: never; takeDataFrom: Functions }) & {\r\n\ttransform?: DataTransformRule;\r\n\tasAccessor?: boolean;\r\n};\r\n\r\ntype DeserializedRequest = {\r\n\turl: string;\r\n\tmethod: string;\r\n\theaders: [string, string][];\r\n\tbody: string;\r\n};\r\ntype DeserializedResponse = {\r\n\tstatus: number;\r\n\tstatusText: string;\r\n\theaders: [string, string][];\r\n\tbody: string;\r\n};\r\n\r\n/**\r\n * Transforms data from one format to another.\r\n *\r\n * @param data Data to transform.\r\n * @param transform Transform to apply.\r\n * @returns Transformed data.\r\n */\r\nexport const transformData = async <\r\n\tFrom extends TransformDataType,\r\n\tTo extends ParseTransformFrom<From>,\r\n>(\r\n\tdata: ParseType<From>,\r\n\ttransform: TransformRule<From, To>,\r\n): Promise<ParseType<To>> => {\r\n\tswitch (transform.from) {\r\n\t\tcase 'buffer': {\r\n\t\t\tif (transform.to === 'blob') {\r\n\t\t\t\treturn new Blob([data as ParseType<'buffer'>]) as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tif (transform.to === 'base64') {\r\n\t\t\t\tconst bytes = new Uint8Array(data as ParseType<'buffer'>);\r\n\t\t\t\tlet binary = '';\r\n\t\t\t\tfor (let i = 0; i < bytes.byteLength; i++) {\r\n\t\t\t\t\tbinary += String.fromCharCode(bytes[i] as number);\r\n\t\t\t\t}\r\n\t\t\t\treturn btoa(binary) as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tconst asText = new TextDecoder().decode(data as ParseType<'buffer'>);\r\n\t\t\tif (transform.to === 'text') return asText as ParseType<To>;\r\n\t\t\tif (transform.to === 'json') return JSON.parse(asText) as ParseType<To>;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'blob': {\r\n\t\t\tif (transform.to === 'base64') {\r\n\t\t\t\tconst buffer = await (data as Blob).arrayBuffer();\r\n\t\t\t\treturn transformData(buffer, { from: 'buffer', to: 'base64' }) as Promise<ParseType<To>>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'stream': {\r\n\t\t\tif (transform.to === 'base64') {\r\n\t\t\t\tconst buffer = await (data as ReadableStream).getReader().read();\r\n\t\t\t\treturn transformData(buffer.value as ArrayBuffer, {\r\n\t\t\t\t\tfrom: 'buffer',\r\n\t\t\t\t\tto: 'base64',\r\n\t\t\t\t}) as Promise<ParseType<To>>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'base64': {\r\n\t\t\tif (transform.to === 'buffer') {\r\n\t\t\t\treturn Uint8Array.from(atob(data as string), (c) => c.charCodeAt(0))\r\n\t\t\t\t\t.buffer as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tif (transform.to === 'blob') {\r\n\t\t\t\tconst buffer = await transformData(data as ParseType<'base64'>, {\r\n\t\t\t\t\tfrom: 'base64',\r\n\t\t\t\t\tto: 'buffer',\r\n\t\t\t\t});\r\n\t\t\t\treturn new Blob([buffer]) as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tif (transform.to === 'stream') {\r\n\t\t\t\tconst buffer = await transformData(data as ParseType<'base64'>, {\r\n\t\t\t\t\tfrom: 'base64',\r\n\t\t\t\t\tto: 'buffer',\r\n\t\t\t\t});\r\n\t\t\t\tconst { readable, writable } = new FixedLengthStream(buffer.byteLength);\r\n\t\t\t\tconst writer = writable.getWriter();\r\n\t\t\t\twriter.write(buffer);\r\n\t\t\t\twriter.close();\r\n\t\t\t\treturn readable as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tif (transform.to === 'url') {\r\n\t\t\t\treturn new URL(data as string) as ParseType<To>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'url': {\r\n\t\t\tif (transform.to === 'text') {\r\n\t\t\t\treturn (data as URL).toString() as ParseType<To>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'request': {\r\n\t\t\tif (transform.to === 'text') {\r\n\t\t\t\tconst asReq = data as Request;\r\n\t\t\t\treturn JSON.stringify({\r\n\t\t\t\t\turl: asReq.url,\r\n\t\t\t\t\tmethod: asReq.method,\r\n\t\t\t\t\theaders: [...asReq.headers.entries()],\r\n\t\t\t\t\tbody: await transformData(await asReq.arrayBuffer(), {\r\n\t\t\t\t\t\tfrom: 'buffer',\r\n\t\t\t\t\t\tto: 'base64',\r\n\t\t\t\t\t}),\r\n\t\t\t\t} satisfies DeserializedRequest) as ParseType<To>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'response': {\r\n\t\t\tif (transform.to === 'text') {\r\n\t\t\t\tconst asResp = data as Response;\r\n\t\t\t\treturn JSON.stringify({\r\n\t\t\t\t\tstatus: asResp.status,\r\n\t\t\t\t\tstatusText: asResp.statusText,\r\n\t\t\t\t\theaders: [...asResp.headers.entries()],\r\n\t\t\t\t\tbody: await transformData(await asResp.arrayBuffer(), { from: 'buffer', to: 'base64' }),\r\n\t\t\t\t} satisfies DeserializedResponse) as ParseType<To>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tcase 'text': {\r\n\t\t\tif (transform.to === 'url') {\r\n\t\t\t\treturn new URL(data as string) as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tif (transform.to === 'request') {\r\n\t\t\t\tconst deserialized = JSON.parse(data as string) as DeserializedRequest;\r\n\t\t\t\treturn new Request(deserialized.url, {\r\n\t\t\t\t\tmethod: deserialized.method,\r\n\t\t\t\t\theaders: Object.fromEntries(deserialized.headers),\r\n\t\t\t\t\tbody: deserialized.body\r\n\t\t\t\t\t\t? await transformData(deserialized.body, { from: 'base64', to: 'buffer' })\r\n\t\t\t\t\t\t: undefined,\r\n\t\t\t\t}) as ParseType<To>;\r\n\t\t\t}\r\n\r\n\t\t\tif (transform.to === 'response') {\r\n\t\t\t\tconst deserialized = JSON.parse(data as string) as DeserializedResponse;\r\n\t\t\t\treturn new Response(\r\n\t\t\t\t\tdeserialized.body\r\n\t\t\t\t\t\t? await transformData(deserialized.body, { from: 'base64', to: 'buffer' })\r\n\t\t\t\t\t\t: undefined,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstatus: deserialized.status,\r\n\t\t\t\t\t\tstatusText: deserialized.statusText,\r\n\t\t\t\t\t\theaders: Object.fromEntries(deserialized.headers),\r\n\t\t\t\t\t},\r\n\t\t\t\t) as ParseType<To>;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdefault:\r\n\t\t// no default\r\n\t}\r\n\r\n\treturn data as unknown as ParseType<To>;\r\n};\r\n\r\n/**\r\n * Prepares the argument's data to be sent over HTTP via the binding proxy.\r\n * This will transform any `ArrayBuffer` or `Blob` to `base64` and add the `transform` property.\r\n *\r\n * @param data The data to prepare.\r\n */\r\nexport const prepareDataForProxy = async (\r\n\trawData: PropertyCallArg['data'],\r\n\tfallback: PropertyCallArg,\r\n): Promise<PropertyCallArg> => {\r\n\tif (rawData instanceof ArrayBuffer) {\r\n\t\treturn {\r\n\t\t\ttransform: { from: 'base64', to: 'buffer' },\r\n\t\t\tdata: await transformData(rawData, { from: 'buffer', to: 'base64' }),\r\n\t\t};\r\n\t}\r\n\r\n\tif (rawData instanceof Blob) {\r\n\t\treturn {\r\n\t\t\ttransform: { from: 'base64', to: 'blob' },\r\n\t\t\tdata: await transformData(rawData, { from: 'blob', to: 'base64' }),\r\n\t\t};\r\n\t}\r\n\r\n\tif (rawData instanceof URL) {\r\n\t\treturn {\r\n\t\t\ttransform: { from: 'text', to: 'url' },\r\n\t\t\tdata: await transformData(rawData, { from: 'url', to: 'text' }),\r\n\t\t};\r\n\t}\r\n\r\n\tif (rawData instanceof Request) {\r\n\t\treturn {\r\n\t\t\ttransform: { from: 'text', to: 'request' },\r\n\t\t\tdata: await transformData(rawData, { from: 'request', to: 'text' }),\r\n\t\t};\r\n\t}\r\n\r\n\tif (rawData instanceof Response) {\r\n\t\treturn {\r\n\t\t\ttransform: { from: 'text', to: 'response' },\r\n\t\t\tdata: await transformData(rawData, { from: 'response', to: 'text' }),\r\n\t\t};\r\n\t}\r\n\r\n\t// NOTE: We can't use `instanceof` here as the value may not strictly be an instance of `ReadableStream`.\r\n\tif (\r\n\t\trawData !== null &&\r\n\t\ttypeof rawData === 'object' &&\r\n\t\t'getReader' in rawData &&\r\n\t\ttypeof rawData.getReader === 'function'\r\n\t) {\r\n\t\treturn {\r\n\t\t\ttransform: { from: 'base64', to: 'stream' },\r\n\t\t\tdata: await transformData(rawData as ReadableStream, { from: 'stream', to: 'base64' }),\r\n\t\t};\r\n\t}\r\n\r\n\treturn fallback;\r\n};\r\n\r\ntype PropertyCallArg = PropertyCall['args'][0];\r\n\r\nexport const transformFunctionInfo = async <Fn extends FunctionInfo>(\r\n\t{ data, takeDataFrom, transform }: Fn,\r\n\tfns: { [key in Functions]?: FunctionInfo },\r\n) => {\r\n\t// eslint-disable-next-line no-nested-ternary\r\n\tconst takenData = (\r\n\t\ttakeDataFrom ? await transformFunctionInfo(fns[takeDataFrom] as FunctionInfo, fns) : data\r\n\t) as TransformRawType | (() => TransformRawType | Promise<TransformRawType>);\r\n\r\n\tconst transformDataFn =\r\n\t\ttakenData && transform\r\n\t\t\t? async () => {\r\n\t\t\t\t\tconst derivedData =\r\n\t\t\t\t\t\ttypeof takenData === 'function' && !(takenData instanceof Blob)\r\n\t\t\t\t\t\t\t? await Promise.resolve(takenData())\r\n\t\t\t\t\t\t\t: takenData;\r\n\r\n\t\t\t\t\treturn Promise.resolve(transformData(derivedData, transform));\r\n\t\t\t  }\r\n\t\t\t: takenData ?? data;\r\n\r\n\treturn transformDataFn as TransformRawType | (() => TransformRawType | Promise<TransformRawType>);\r\n};\r\n"],"names":["transformData","data","transform","bytes","binary","i","asText","buffer","c","readable","writable","writer","asReq","asResp","deserialized","prepareDataForProxy","rawData","fallback","transformFunctionInfo","takeDataFrom","fns","takenData","derivedData"],"mappings":"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"}