{"version":3,"file":"_worker.js","sources":["../../../src/cli/template/_worker.ts"],"sourcesContent":["import type { CacheStorage } from '@cloudflare/workers-types';\r\nimport type { BindingRequest, BindingResponse, PropertyCall } from '../../proxy';\r\nimport type { FunctionInfo, TransformRule } from '../../transform';\r\nimport { prepareDataForProxy, transformData } from '../../transform';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntype Env = { [key: string]: any };\r\n\r\n/**\r\n * Reduces and reconstructs the calls that the proxy destructured.\r\n *\r\n * @param callee The object to call the function on.\r\n * @param callsToProcess Function calls to process.\r\n * @returns The result of the function calls.\r\n */\r\nconst reduceCalls = async (callee: Env, callsToProcess: PropertyCall[]): Promise<unknown> => {\r\n\treturn callsToProcess.reduce(async (acc, { prop, args }) => {\r\n\t\treturn (await acc)[prop](\r\n\t\t\t...(await Promise.all(\r\n\t\t\t\targs.map(async (arg) => {\r\n\t\t\t\t\tif (Array.isArray(arg.data)) {\r\n\t\t\t\t\t\treturn Promise.all(\r\n\t\t\t\t\t\t\targ.data.map((a) => ('__bindingId' in a ? reduceCalls(callee, a.__calls) : a)),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// @ts-expect-error - We don't know the type of the data.\r\n\t\t\t\t\treturn arg.transform ? transformData(arg.data, arg.transform) : arg.data;\r\n\t\t\t\t}),\r\n\t\t\t)),\r\n\t\t);\r\n\t}, Promise.resolve(callee));\r\n};\r\n\r\nexport default {\r\n\tasync fetch(request, env) {\r\n\t\tif (request.method !== 'POST') {\r\n\t\t\treturn new Response('Method not allowed', { status: 405 });\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\r\n\t\t\tconst { __original_call, __proxyType, __bindingId, __calls } =\r\n\t\t\t\tawait request.json<BindingRequest>();\r\n\r\n\t\t\tconst baseId = __original_call ? __original_call.__bindingId : __bindingId;\r\n\r\n\t\t\tlet base;\r\n\t\t\tswitch (__proxyType) {\r\n\t\t\t\tcase 'caches': {\r\n\t\t\t\t\tconst asCacheStorage = caches as unknown as CacheStorage;\r\n\t\t\t\t\tbase = baseId === 'default' ? asCacheStorage.default : await asCacheStorage.open(baseId);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'binding': {\r\n\t\t\t\t\tbase = env[baseId];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tthrow new Error('Unknown proxy type');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst callee = __original_call ? await reduceCalls(base, __original_call.__calls) : base;\r\n\r\n\t\t\tconst rawData = await reduceCalls(callee, __calls);\r\n\t\t\tconst resp: BindingResponse = { success: true, data: rawData, functions: {} };\r\n\r\n\t\t\tif (resp.success) {\r\n\t\t\t\tconst transformedResp = await prepareDataForProxy(rawData, { data: rawData });\r\n\t\t\t\tresp.transform = transformedResp.transform;\r\n\t\t\t\tresp.data = transformedResp.data;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\trawData &&\r\n\t\t\t\t\ttypeof rawData === 'object' &&\r\n\t\t\t\t\t!Array.isArray(rawData) &&\r\n\t\t\t\t\t![Response, Request, URL].find((t) => rawData instanceof t)\r\n\t\t\t\t) {\r\n\t\t\t\t\t// resp.arrayBuffer() => Promise<ArrayBuffer>\r\n\t\t\t\t\tif ('arrayBuffer' in rawData && typeof rawData.arrayBuffer === 'function') {\r\n\t\t\t\t\t\tconst buffer = await rawData.arrayBuffer();\r\n\t\t\t\t\t\tresp.functions.arrayBuffer = (await prepareDataForProxy(buffer, {\r\n\t\t\t\t\t\t\tdata: buffer,\r\n\t\t\t\t\t\t})) as FunctionInfo<TransformRule<'buffer', 'base64'>>;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// NOTE: We can assume that we always have an arrayBuffer if we have any of the following.\r\n\r\n\t\t\t\t\t// resp.blob() => Promise<Blob>\r\n\t\t\t\t\tif ('blob' in rawData && typeof rawData.blob === 'function') {\r\n\t\t\t\t\t\tresp.functions.blob = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\ttransform: { from: 'buffer', to: 'blob' },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// resp.text() => Promise<string>\r\n\t\t\t\t\tif ('text' in rawData && typeof rawData.text === 'function') {\r\n\t\t\t\t\t\tresp.functions.text = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\ttransform: { from: 'buffer', to: 'text' },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// resp.json<T>() => Promise<T>\r\n\t\t\t\t\tif ('json' in rawData && typeof rawData.json === 'function') {\r\n\t\t\t\t\t\tresp.functions.json = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\ttransform: { from: 'buffer', to: 'json' },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// resp.body => ReadableStream\r\n\t\t\t\t\tif ('body' in rawData && typeof rawData.body === 'object') {\r\n\t\t\t\t\t\tresp.functions.body = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\tasAccessor: true,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn new Response(JSON.stringify(resp), {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.error(e);\r\n\r\n\t\t\tconst resp = JSON.stringify({\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tdata: e instanceof Error ? e.message : 'Failed to access binding',\r\n\t\t\t});\r\n\r\n\t\t\treturn new Response(resp, {\r\n\t\t\t\tstatus: 500,\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n} as ExportedHandler<Env>;\r\n"],"names":["reduceCalls","callee","callsToProcess","acc","prop","args","arg","a","transformData","_worker","request","env","__original_call","__proxyType","__bindingId","__calls","baseId","base","asCacheStorage","rawData","resp","transformedResp","prepareDataForProxy","t","buffer","e"],"mappings":"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"}