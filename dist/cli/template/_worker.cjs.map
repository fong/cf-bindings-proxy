{"version":3,"file":"_worker.cjs","sources":["../../../src/cli/template/_worker.ts"],"sourcesContent":["import type { CacheStorage } from '@cloudflare/workers-types';\r\nimport type { BindingRequest, BindingResponse, PropertyCall } from '../../proxy';\r\nimport type { FunctionInfo, TransformRule } from '../../transform';\r\nimport { prepareDataForProxy, transformData } from '../../transform';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntype Env = { [key: string]: any };\r\n\r\n/**\r\n * Reduces and reconstructs the calls that the proxy destructured.\r\n *\r\n * @param callee The object to call the function on.\r\n * @param callsToProcess Function calls to process.\r\n * @returns The result of the function calls.\r\n */\r\nconst reduceCalls = async (callee: Env, callsToProcess: PropertyCall[]): Promise<unknown> => {\r\n\treturn callsToProcess.reduce(async (acc, { prop, args }) => {\r\n\t\treturn (await acc)[prop](\r\n\t\t\t...(await Promise.all(\r\n\t\t\t\targs.map(async (arg) => {\r\n\t\t\t\t\tif (Array.isArray(arg.data)) {\r\n\t\t\t\t\t\treturn Promise.all(\r\n\t\t\t\t\t\t\targ.data.map((a) => ('__bindingId' in a ? reduceCalls(callee, a.__calls) : a)),\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// @ts-expect-error - We don't know the type of the data.\r\n\t\t\t\t\treturn arg.transform ? transformData(arg.data, arg.transform) : arg.data;\r\n\t\t\t\t}),\r\n\t\t\t)),\r\n\t\t);\r\n\t}, Promise.resolve(callee));\r\n};\r\n\r\nexport default {\r\n\tasync fetch(request, env) {\r\n\t\tif (request.method !== 'POST') {\r\n\t\t\treturn new Response('Method not allowed', { status: 405 });\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\r\n\t\t\tconst { __original_call, __proxyType, __bindingId, __calls } =\r\n\t\t\t\tawait request.json<BindingRequest>();\r\n\r\n\t\t\tconst baseId = __original_call ? __original_call.__bindingId : __bindingId;\r\n\r\n\t\t\tlet base;\r\n\t\t\tswitch (__proxyType) {\r\n\t\t\t\tcase 'caches': {\r\n\t\t\t\t\tconst asCacheStorage = caches as unknown as CacheStorage;\r\n\t\t\t\t\tbase = baseId === 'default' ? asCacheStorage.default : await asCacheStorage.open(baseId);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'binding': {\r\n\t\t\t\t\tbase = env[baseId];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tthrow new Error('Unknown proxy type');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst callee = __original_call ? await reduceCalls(base, __original_call.__calls) : base;\r\n\r\n\t\t\tconst rawData = await reduceCalls(callee, __calls);\r\n\t\t\tconst resp: BindingResponse = { success: true, data: rawData, functions: {} };\r\n\r\n\t\t\tif (resp.success) {\r\n\t\t\t\tconst transformedResp = await prepareDataForProxy(rawData, { data: rawData });\r\n\t\t\t\tresp.transform = transformedResp.transform;\r\n\t\t\t\tresp.data = transformedResp.data;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\trawData &&\r\n\t\t\t\t\ttypeof rawData === 'object' &&\r\n\t\t\t\t\t!Array.isArray(rawData) &&\r\n\t\t\t\t\t![Response, Request, URL].find((t) => rawData instanceof t)\r\n\t\t\t\t) {\r\n\t\t\t\t\t// resp.arrayBuffer() => Promise<ArrayBuffer>\r\n\t\t\t\t\tif ('arrayBuffer' in rawData && typeof rawData.arrayBuffer === 'function') {\r\n\t\t\t\t\t\tconst buffer = await rawData.arrayBuffer();\r\n\t\t\t\t\t\tresp.functions.arrayBuffer = (await prepareDataForProxy(buffer, {\r\n\t\t\t\t\t\t\tdata: buffer,\r\n\t\t\t\t\t\t})) as FunctionInfo<TransformRule<'buffer', 'base64'>>;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// NOTE: We can assume that we always have an arrayBuffer if we have any of the following.\r\n\r\n\t\t\t\t\t// resp.blob() => Promise<Blob>\r\n\t\t\t\t\tif ('blob' in rawData && typeof rawData.blob === 'function') {\r\n\t\t\t\t\t\tresp.functions.blob = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\ttransform: { from: 'buffer', to: 'blob' },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// resp.text() => Promise<string>\r\n\t\t\t\t\tif ('text' in rawData && typeof rawData.text === 'function') {\r\n\t\t\t\t\t\tresp.functions.text = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\ttransform: { from: 'buffer', to: 'text' },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// resp.json<T>() => Promise<T>\r\n\t\t\t\t\tif ('json' in rawData && typeof rawData.json === 'function') {\r\n\t\t\t\t\t\tresp.functions.json = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\ttransform: { from: 'buffer', to: 'json' },\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// resp.body => ReadableStream\r\n\t\t\t\t\tif ('body' in rawData && typeof rawData.body === 'object') {\r\n\t\t\t\t\t\tresp.functions.body = {\r\n\t\t\t\t\t\t\ttakeDataFrom: 'arrayBuffer',\r\n\t\t\t\t\t\t\tasAccessor: true,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn new Response(JSON.stringify(resp), {\r\n\t\t\t\tstatus: 200,\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\tconsole.error(e);\r\n\r\n\t\t\tconst resp = JSON.stringify({\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tdata: e instanceof Error ? e.message : 'Failed to access binding',\r\n\t\t\t});\r\n\r\n\t\t\treturn new Response(resp, {\r\n\t\t\t\tstatus: 500,\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n} as ExportedHandler<Env>;\r\n"],"names":["reduceCalls","callee","callsToProcess","acc","prop","args","arg","a","transformData","_worker","request","env","__original_call","__proxyType","__bindingId","__calls","baseId","base","asCacheStorage","rawData","resp","transformedResp","prepareDataForProxy","t","buffer","e"],"mappings":"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"}